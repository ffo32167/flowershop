// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	internal "github.com/ffo32167/flowershop/internal"
	gomock "github.com/golang/mock/gomock"
)

// MockSqlDB is a mock of SqlDB interface.
type MockSqlDB struct {
	ctrl     *gomock.Controller
	recorder *MockSqlDBMockRecorder
}

// MockSqlDBMockRecorder is the mock recorder for MockSqlDB.
type MockSqlDBMockRecorder struct {
	mock *MockSqlDB
}

// NewMockSqlDB creates a new mock instance.
func NewMockSqlDB(ctrl *gomock.Controller) *MockSqlDB {
	mock := &MockSqlDB{ctrl: ctrl}
	mock.recorder = &MockSqlDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlDB) EXPECT() *MockSqlDBMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSqlDB) List(ctx context.Context) ([]internal.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]internal.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSqlDBMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSqlDB)(nil).List), ctx)
}

// Sale mocks base method.
func (m *MockSqlDB) Sale(ctx context.Context, id, cnt int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sale", ctx, id, cnt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sale indicates an expected call of Sale.
func (mr *MockSqlDBMockRecorder) Sale(ctx, id, cnt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sale", reflect.TypeOf((*MockSqlDB)(nil).Sale), ctx, id, cnt)
}

// MockNoSqlDB is a mock of NoSqlDB interface.
type MockNoSqlDB struct {
	ctrl     *gomock.Controller
	recorder *MockNoSqlDBMockRecorder
}

// MockNoSqlDBMockRecorder is the mock recorder for MockNoSqlDB.
type MockNoSqlDBMockRecorder struct {
	mock *MockNoSqlDB
}

// NewMockNoSqlDB creates a new mock instance.
func NewMockNoSqlDB(ctrl *gomock.Controller) *MockNoSqlDB {
	mock := &MockNoSqlDB{ctrl: ctrl}
	mock.recorder = &MockNoSqlDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoSqlDB) EXPECT() *MockNoSqlDBMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockNoSqlDB) List(ctx context.Context) ([]internal.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]internal.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNoSqlDBMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNoSqlDB)(nil).List), ctx)
}

// ListCreate mocks base method.
func (m *MockNoSqlDB) ListCreate(ctx context.Context, products []internal.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCreate", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCreate indicates an expected call of ListCreate.
func (mr *MockNoSqlDBMockRecorder) ListCreate(ctx, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCreate", reflect.TypeOf((*MockNoSqlDB)(nil).ListCreate), ctx, products)
}

// Sale mocks base method.
func (m *MockNoSqlDB) Sale(ctx context.Context, id, cnt int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sale", ctx, id, cnt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sale indicates an expected call of Sale.
func (mr *MockNoSqlDBMockRecorder) Sale(ctx, id, cnt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sale", reflect.TypeOf((*MockNoSqlDB)(nil).Sale), ctx, id, cnt)
}
